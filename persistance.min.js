const e=["7","8","9"],o=["2","3"],arguments=process.argv.slice(2),t={value:0,persistance:0},l=e=>"0"===e,s=e=>"5"===e,n=e=>parseInt(e)%2==0,a=(e,o=1)=>{let t=Array(o),l=[],s=n=>{if(n===o){let e=t.slice().sort().join("");return l.some(o=>e===o)||l.push(e),void(e=void 0)}for(let o of e)t[n]=o,o=void 0,s(n+1)};return s(0),t=void 0,l},r=(e,o=e,t=0)=>{if(1===o.length)return{value:e,persistance:t};if(o.some(l)||o.some(s)&&o.some(n))return{value:e,persistance:t+=2};t++;let a=1;o.map(e=>a*=parseInt(e));let i=r(e,a.toString().split(""),t);return a=void 0,i},i=(l={value:0,persistance:0})=>{if(!global.gc)return void console.log("Garbage collection is not exposed\nrun with '--expose_gc'");Object.assign(t,l);let s=t.persistance+1;for(;;){global.gc(),console.log("\tAt size ->",s);let l=a(e,s);for(let e of o.map(e=>l.map(o=>e+o)).flat()){let o=r(e.split(""));e=void 0,o.persistance>t.persistance?(o.value=parseInt(o.value.join("")),Object.assign(t,o),console.log("\nFound ->",o,"\n")):o=void 0}l=void 0,s++}};switch(console.log("\nRunning persistance calculator\n------------------------------\n"),arguments[0]){case void 0:case"run":{let e;try{e=JSON.parse(arguments[1])}finally{i(e)}break}case"calculate":try{const e=parseInt(arguments[1]).toString().split(""),o=r(e);o.value=parseInt(o.value.join("")),console.log(o)}catch(c){console.log("Invalid integer ->",arguments[1])}break;default:console.log("Invalid argument ->",arguments[0])}module.exports=i,module.exports.calculate=r,module.exports.combine=a;
